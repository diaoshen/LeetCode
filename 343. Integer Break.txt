343. Integer Break
Medium

890

207

Add to List

Share
Given a positive integer n, break it into the sum of at least two positive integers and maximize the product of those integers. Return the maximum product you can get.

Example 1:

Input: 2
Output: 1
Explanation: 2 = 1 + 1, 1 × 1 = 1.
Example 2:

Input: 10
Output: 36
Explanation: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36.
Note: You may assume that n is not less than 2 and not larger than 58.



C++ DP Top down (Memoization)

class Solution {
public:
    
    
    int integerBreak(int n) {    
        vector<int> r(n+1 , -1);
        return helper(n , r);
    }
    
    int helper(int n , vector<int> &r) {
        if(r[n] >= 1) return r[n];
        int q;
        if(n == 2)
            q = 1;
        else {
            q = -999;
            for(int i = 1 ; i <= n ; i++) {
                q = max(q , i*helper(n-i , r));
                q = max(q , i*(n-i));
            }
            r[n] = q;
        }
        return q;
    }
};


C++ DP (Bottom Up)
class Solution {
public:
      
    int integerBreak(int n) {
        
        vector<int> r(n+1, 1);
        for(int j = 2 ; j <= n ; j++){
            int q = -999;
            for(int i = 1 ; i < j ; i++){
                q = max( q, i*r[j-i]);
                q = max( q, i*(j-i));
            }
            r[j] = q;
        }
        return r[n];
    
    }

};


Print Solution 

#include <iostream>
#include <vector>

using namespace std; 

/**
	(1)using >= will yield biggest first cut   , using > will yield smallest first cut
	:: means friend
**/
 long long int integerBreak(long long int n) {
	 	vector<long long int> s(n+1, 1);
        vector<long long int> r(n+1, 1);
        for(int j = 3 ; j <= n ; j++){
            long long int q = -999;
			long long int bestcut = -999;
            for(int i = 1 ; i < j; i++){
				int curr = i*r[j-i];
					if(curr >= q) { //(1)
						if(j == n){
							cout << i << " :: " << j-i << " => " << curr << endl;
						}
						q = curr;
						bestcut = i;
					}
				curr = i*(j-i);
				if(curr >= q) {
						if(j == n){
							cout << i << " : " << j-i << " => " << curr << endl;
						}
					bestcut = i;
					q = curr;
				}
                // q = max( q, i*r[j-i]);
                // q = max( q, i*(j-i));
            }
			s[j] = bestcut;
            r[j] = q;
        }

        
		long long int k = n;


		while( k > 0 ) {
			cout << s[k] << " , ";
			k -= s[k];
			if(n > 3 && k <= 3) {
				cout << k;
				break;
			}
		}
		cout << endl << endl;
		for(int i = 0 ; i < s.size(); i++){
			cout << i << ",";
		}
		cout << endl;
		for(int x : s) {
			cout << x << ',';
		}
		cout << endl;
        return r[n];
}

int main() {
	int res = integerBreak(10);
	cout << "Res = " << res << endl;
}

