1356. Sort Integers by The Number of 1 Bits
Easy


Given an integer array arr. You have to sort the integers in the array in ascending order by the number of 1's in their binary representation and in case of two or more integers have the same number of 1's you have to sort them in ascending order.

Return the sorted array.

 

Example 1:

Input: arr = [0,1,2,3,4,5,6,7,8]
Output: [0,1,2,4,8,3,5,6,7]
Explantion: [0] is the only integer with 0 bits.
[1,2,4,8] all have 1 bit.
[3,5,6] have 2 bits.
[7] has 3 bits.
The sorted array by bits is [0,1,2,4,8,3,5,6,7]
Example 2:

Input: arr = [1024,512,256,128,64,32,16,8,4,2,1]
Output: [1,2,4,8,16,32,64,128,256,512,1024]
Explantion: All integers have 1 bit in the binary representation, you should just sort them in ascending order.
Example 3:

Input: arr = [10000,10000]
Output: [10000,10000]
Example 4:

Input: arr = [2,3,5,7,11,13,17,19]
Output: [2,3,5,17,7,11,13,19]
Example 5:

Input: arr = [10,100,1000,10000]
Output: [10,100,10000,1000]
 

Constraints:

1 <= arr.length <= 500
0 <= arr[i] <= 10^4


// C++ 
class Solution {
public:
    vector<int> sortByBits(vector<int>& arr) {
        vector<vector<int>> temp(14); // 10^4 means up to 14 1's 
        
        for(auto& x : arr) {
            int count = 0;
            int save = x;
            while(save) {
                count += save & 1;
                save >>= 1;
            }
            temp[count].push_back(x);
        }
        
        vector<int> res;
        for(auto &x : temp) {
            sort(x.begin(), x.end());
            for(auto &item : x) {
                res.push_back(item);
            }
        }
        return res;
        
    }
};

// C++ Using _builtin_popcount 
class Solution {
public:
    vector<int> sortByBits(vector<int>& arr) {
        sort(arr.begin(), arr.end(),[](const int& a, const int& b){
            int countA = __builtin_popcount(a), countB = __builtin_popcount(b);
            return countA==countB ? a<b:countA<countB;});
        return arr;
    }
};


// C++ using bitset<32>
class Solution {
public:
    
    static bool customCompare(const int& a, const int& b) 
    { 
        int x = bitset<32>(a).count();
        int y = bitset<32>(b).count();
        if(x != y)
            return x < y;
        return a < b;
    } 
    
    vector<int> sortByBits(vector<int>& arr) {
        sort(arr.begin(), arr.end(),customCompare);
        return arr;
    }
};
