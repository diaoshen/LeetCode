202. Happy Number
Easy


Write an algorithm to determine if a number n is "happy".

A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.

Return True if n is a happy number, and False if not.

Example: 

Input: 19
Output: true
Explanation: 
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1



//C++ , if the number is not happy, it will eventually repeat(cycle)
class Solution {
public:
    bool isHappy(int n) {
        int sum = 0;
        unordered_set<int> table;
        while(true){
            while(n > 0) {
                int digit = n % 10;
                sum += digit * digit;
                n /= 10;
            }
            if(sum == 1) return true;
            unordered_set<int>::const_iterator res = table.find(sum);
            if(res != table.end()) return false;
            else table.insert(sum);
            n = sum;
            sum = 0;
        }
    }
};