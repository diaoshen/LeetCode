206. Reverse Linked List
Easy


Reverse a singly linked list.

Example:

Input: 1->2->3->4->5->NULL
Output: 5->4->3->2->1->NULL
Follow up:

A linked list can be reversed either iteratively or recursively. Could you implement both?




// C++ iteratively V1
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode* reverse = nullptr;
        ListNode* next = nullptr;

        while(head){
            next = head->next; //save next 
            head->next = reverse; // link back 
            reverse = head; // move reverse --> 
            head = next; // move head --> 
        }
        return reverse;
    }
};

C++ iteratively V2 

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        
        if(head == nullptr) return nullptr;
        if(head->next == nullptr) return head;
   
        ListNode* A = head;
        ListNode* B = A->next;
        ListNode* C = B->next;

        while(C){
            B->next = A;
            A = B;
            B = C;
            C = C->next;
        };

        B->next = A;
        head->next = nullptr;
              
        return B;
    }
};


//C++ recursively
ListNode* helper(ListNode* before , ListNode* current) {
    ListNode* next = current->next; //save next 
    current->next = before; // reverse  current -> before 
    if(next != nullptr)
        return helper(current,next);
    return current;
}

ListNode* reverseList(ListNode* head) {
    
    if(head == nullptr) return nullptr;
    if(head->next == nullptr) return head;

    return  helper(nullptr, head);

}


//C++ recursively v2 

class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(head == nullptr || head->next == nullptr ) return head;
        ListNode* p = reverseList(head->next);
        head->next->next = head; 
        head->next = nullptr;
        return p;
    }
};