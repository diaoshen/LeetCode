144. Binary Tree Preorder Traversal
Medium


Given a binary tree, return the preorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,2,3]
Follow up: Recursive solution is trivial, could you do it iteratively?


// C++ Iterative
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        if(root == nullptr) return {};
        vector<int> res;
        stack<TreeNode *> s;
        s.push(root);
        while(!s.empty()) {
            TreeNode* node = s.top(); s.pop();
            res.push_back(node->val);
            if(node->right != nullptr) s.push(node->right);
            if(node->left != nullptr) s.push(node->left);
        }
        return res;
        
    }
};

// C++ Recursive
class Solution {
public:
    void helper(TreeNode* root, vector<int>& res) {
        if(root == nullptr) return;
        res.push_back(root->val);
        helper(root->left,res);
        helper(root->right,res);
    }
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> res;
        helper(root,res);
        return res;
    }
};