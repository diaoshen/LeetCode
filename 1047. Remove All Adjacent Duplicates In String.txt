1047. Remove All Adjacent Duplicates In String
Easy


Given a string S of lowercase letters, a duplicate removal consists of choosing two adjacent and equal letters, and removing them.

We repeatedly make duplicate removals on S until we no longer can.

Return the final string after all such duplicate removals have been made.  It is guaranteed the answer is unique.

 

Example 1:

Input: "abbaca"
Output: "ca"
Explanation: 
For example, in "abbaca" we could remove "bb" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is "aaca", of which only "aa" is possible, so the final string is "ca".
 

Note:

1 <= S.length <= 20000
S consists only of English lowercase letters.



// C++ Using stack 
class Solution {
public:
    string removeDuplicates(string S) {
        int len = S.length();
        string res = "";
        for(auto &ch : S) {
            if(!res.empty() && res.back() == ch) res.pop_back();
            else res += ch;
        }
        return res;
    }
};


// C++ Using 2 pointers 
Note: Whenever error occurs, a points to beginning of a duplicate pair and so shift back to reset position
cursor b always point to next element to visit and so re-update cursor a for next iteration as if gap never happened

class Solution {
public:
    string removeDuplicates(string S) {
        int a = 0, n = S.size();
        for (int b = 0; b < n; ++b, ++a) {
            S[a] = S[b];
            if (a > 0 && S[a-1] == S[a]) a -= 2; 
        }
        return S.substr(0, a);
    }
};


// C++ Recursive O(n^2) 
class Solution {
public:
    string removeDuplicates(string S) {
    for (auto i = 1; i < S.size(); ++i)
        if (S[i - 1] == S[i]) 
        return removeDuplicates(S.substr(0, i - 1) + S.substr(i + 1));
    return S;
    }
};
