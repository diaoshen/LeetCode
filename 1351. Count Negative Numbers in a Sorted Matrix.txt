1351. Count Negative Numbers in a Sorted Matrix
Easy


Given a m * n matrix grid which is sorted in non-increasing order both row-wise and column-wise. 

Return the number of negative numbers in grid.

 

Example 1:

Input: grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]
Output: 8
Explanation: There are 8 negatives number in the matrix.
Example 2:

Input: grid = [[3,2],[1,0]]
Output: 0
Example 3:

Input: grid = [[1,-1],[-1,-1]]
Output: 3
Example 4:

Input: grid = [[-1]]
Output: 1
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 100
-100 <= grid[i][j] <= 100



// C++ 
class Solution {
public:
    int countNegatives(vector<vector<int>>& grid) {
        int ans = 0;
        for (const vector<int>& row: grid)
            ans += upper_bound(row.rbegin(), row.rend(), -1) - row.rbegin();
        return ans;
    }
};

// C++ , start from lower right corner 
class Solution {
public:
    int countNegatives(vector<vector<int>>& grid) {
        int counter = 0;
        int row = grid.size();
        int col = grid[0].size();
        for(int i = row - 1 ; i >= 0 ; i--) {
            for(int j = col - 1 ; j >= 0 ; j--) {
                if(grid[i][j] >= 0) break;
                counter++;
            }
        }
        return counter;
    }
};