938. Range Sum of BST
Easy


Given the root node of a binary search tree, return the sum of values of all nodes with value between L and R (inclusive).

The binary search tree is guaranteed to have unique values.

 

Example 1:

Input: root = [10,5,15,3,7,null,18], L = 7, R = 15
Output: 32
Example 2:

Input: root = [10,5,15,3,7,13,18,1,null,6], L = 6, R = 10
Output: 23
 

Note:

The number of nodes in the tree is at most 10000.
The final answer is guaranteed to be less than 2^31.




// C++ Recursively 
static int _=[]() {std::ios::sync_with_stdio(false);cin.tie(0);return 0;}();
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int L = 0;
    int R = 0;
    int sum = 0;
    
    void helper(TreeNode* node) {
        if (!node) return;       
        if (node->val >= L and node->val <= R) sum += node->val;
        if (node->val >= L) helper(node->left);
        if (node->val <= R) helper(node->right);
    }
    
    int rangeSumBST(TreeNode* root, int L, int R) {
        this->L = L;
        this->R = R;
        
        helper(root);
        root->left = root->right = nullptr;
        return sum;
    }
};


//C++ Iterative 
static int _=[]() {std::ios::sync_with_stdio(false);cin.tie(0);return 0;}();
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int rangeSumBST(TreeNode* root, int L, int R) {
        if(root == nullptr ) return 0;
        int sum = 0;
        queue<TreeNode*> q;
        q.push(root);
        TreeNode* node = nullptr;
        while(!q.empty()) {
            node = q.front(); q.pop();
            if(node->val >= L and node->val <= R) sum+= node->val;
            if(node->val > L and node->left != nullptr) q.push(node->left);
            if(node->val < R and node->right != nullptr) q.push(node->right);
        }
        return sum;
    }
};