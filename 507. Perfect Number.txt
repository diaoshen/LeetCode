507. Perfect Number
Easy


We define the Perfect Number is a positive integer that is equal to the sum of all its positive divisors except itself.

Now, given an integer n, write a function that returns true when it is a perfect number and false when it is not.
Example:
Input: 28
Output: True
Explanation: 28 = 1 + 2 + 4 + 7 + 14
Note: The input number n will not exceed 100,000,000. (1e8)


// C++ 
class Solution {
public:
    bool checkPerfectNumber(int num) {
        if(num <= 1) return false;
        int sum = 0;
        // going up to sqrt(num) b/c largest pair is sqrt(num) * sqrt(num)
        for(int i = 2; i*i < num; i++) {
            if(num % i == 0) {
                sum += i;
                if(i * i != num)
                    sum += num/i;
                if(sum > num) return false;
            }
        }
        // +1 to account for when i is 1 
        return sum + 1 == num;
    }
};

// C++ Short version 
bool checkPerfectNumber(int num) {
    int sum=1;
    for(int i=2;i<=sqrt(num);i++) if(num%i==0) sum += i + (i==num/i ? 0 : num/i);
    return sum==num && num!=1;
}


// C++ Math , only few magic number exists 
class Solution {
public:
    bool checkPerfectNumber(int num) {
        static unordered_set<int> n = {6, 28, 496, 8128, 33550336};
        return n.count(num);
    }
};