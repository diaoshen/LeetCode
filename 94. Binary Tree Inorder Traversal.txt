94. Binary Tree Inorder Traversal
Medium


Given a binary tree, return the inorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,3,2]
Follow up: Recursive solution is trivial, could you do it iteratively?


// C++ Iterative
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        if(root == nullptr) return {};
        vector<int> res;
        stack<TreeNode* > s;
        TreeNode* node = root;
        while(!s.empty() || node != nullptr) {
            if(node != nullptr) {
                s.push(node);
                node = node->left;
            } else {
                node = s.top(); s.pop();
                res.push_back(node->val);
                node = node->right;
            }
        }
        return res;
    }
};

// C++ Iterative by disconnecting left link 
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        if(root == nullptr) return {};
        vector<int> res;
        stack<TreeNode* > s;
        s.push(root);
        while(!s.empty()) {
            TreeNode* node = s.top();
            if(node->left) {
                s.push(node->left);
                node->left = nullptr;
            } else {
                res.push_back(node->val);
                s.pop();
                if(node->right) {
                    s.push(node->right);
                }
            }
        }
        return res;  
    }
};


// C++ Recursive
class Solution {
public:
    
    void helper(TreeNode* root, vector<int>& res) {
        if(root == nullptr) return;
        helper(root->left,res);
        res.push_back(root->val);
        helper(root->right,res);
    }
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> res;
        helper(root,res);
        return res;
    }
};