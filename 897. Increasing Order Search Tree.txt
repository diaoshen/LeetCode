897. Increasing Order Search Tree
Easy


Given a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only 1 right child.

Example 1:
Input: [5,3,6,2,4,null,8,1,null,null,null,7,9]

       5
      / \
    3    6
   / \    \
  2   4    8
 /        / \ 
1        7   9

Output: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]

 1
  \
   2
    \
     3
      \
       4
        \
         5
          \
           6
            \
             7
              \
               8
                \
                 9  
 

Constraints:

The number of nodes in the given tree will be between 1 and 100.
Each node will have a unique integer value from 0 to 1000.



// C++ Iteratively 
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* increasingBST(TreeNode* root) {
        if(root == nullptr) return {};
        
        TreeNode* newRoot = nullptr;
        TreeNode* tail = nullptr;
            
        stack<TreeNode*> s;
        TreeNode* node = root;
        while(!s.empty() || node != nullptr) {
            if(node != nullptr) {
                s.push(node);
                node = node->left;
            } else {
                node = s.top(); s.pop();

                TreeNode* newNode = new TreeNode(node->val);
                if(newRoot == nullptr) {
                    newRoot = newNode;
                    tail = newNode;
                }
                else {
                    tail->right = newNode;
                    tail = newNode;
                }
                
                node = node->right;
            }
        }
        return newRoot;
    }
};


// C++ Recursively 
class Solution {
public:
    
    void helper(TreeNode* root , TreeNode* &tail) {

        if(root == nullptr) return;
        helper(root->left  , tail);
        tail->right = new TreeNode(root->val);
        tail = tail->right;
        helper(root->right,  tail);

    }
    
    TreeNode* increasingBST(TreeNode* root) {
        if(root == nullptr) return {};
        
        TreeNode* newRoot = new TreeNode(-1);
        TreeNode* tail = newRoot;
        
        helper(root,tail);
        return newRoot->right;
    }
};