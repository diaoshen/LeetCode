470. Shuffle the Array
Easy


Given the array nums consisting of 2n elements in the form [x1,x2,...,xn,y1,y2,...,yn].

Return the array in the form [x1,y1,x2,y2,...,xn,yn].

 

Example 1:

Input: nums = [2,5,1,3,4,7], n = 3
Output: [2,3,5,4,1,7] 
Explanation: Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7].
Example 2:

Input: nums = [1,2,3,4,4,3,2,1], n = 4
Output: [1,4,2,3,3,2,4,1]
Example 3:

Input: nums = [1,1,2,2], n = 2
Output: [1,2,1,2]
 

Constraints:

1 <= n <= 500
nums.length == 2n
1 <= nums[i] <= 10^3



// C++ 
O(1) space 
class Solution {
public:
    vector<int> shuffle(vector<int>& nums, int n) {
        if (n == 1) return nums;
        
        queue<int> q;
        q.push(nums[0]);
        q.push(nums[1]);
        int i = 0;
        int j = n;
        while(!q.empty()) {
            nums[i] = q.front(); q.pop();
            nums[i+1] = nums[j];
            i+=2; j++;
            for(int k = 0 ; k < 2 ; k++) {
                if(i+k >= n) break;
                q.push(nums[i+k]);
            }
        }
        return nums;
    }
};


// C++ 
O(2n) space 
class Solution {
public:
    vector<int> shuffle(vector<int>& nums, int n) {
        vector<int> res;
        for(int i = 0 ; i < n ; i++) {
            res.push_back(nums[i]);
            res.push_back(nums[n+i]);
        }
        return res;
    }
};



// C++ 
class Solution {
public:
    vector<int> shuffle(vector<int>& nums, int n) {
        vector<int> res(2*n);
        for(int i = 0; i < nums.size(); i++) {
            // get from i/2 if is even index else get from i/2 + n 
            res[i] = i % 2 == 0? nums[i/2] : nums[n + i/2];
        }
        return res;
    }
};


// C++ 
class Solution {
public:
    vector<int> shuffle(vector<int>& nums, int n) {
        vector<int> res(2*n);
        for(int i = 0; i < n; i++) {
            res[2*i] = nums[i];
            res[2*i + 1] = nums[n+i];
        }
        return res;
    }
};


