118. Pascal's Triangle
Easy


Given a non-negative integer numRows, generate the first numRows of Pascal's triangle.


In Pascal's triangle, each number is the sum of the two numbers directly above it.

Example:

Input: 5
Output:
[
     [1],
    [1,1],
   [1,2,1],
  [1,3,3,1],
 [1,4,6,4,1]
]



// C++ 
class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        if(numRows == 0) return {};
        if(numRows == 1) return {{1}};
        if(numRows == 2) return {{1},{1,1}};
        
        vector<vector<int>> res(numRows);
        res[0] = {1}; res[1] = {1,1};
        for(int i = 2 ; i < numRows ; i++) {
            res[i].push_back(1);
            vector<int> prevRow = res[i-1];
            for(int j = 0 ; j < prevRow.size() - 1 ; j++)
                res[i].push_back(prevRow[j] + prevRow[j+1]);
            res[i].push_back(1);
        }
        return res;
    }
};


// C++
class Solution {
public:
    

long long int nChoosek( int n, int k )
{
    if (k > n) return 0;
    if (k * 2 > n) k = n-k;
    if (k == 0) return 1;

    long long int result = n;
    for( int i = 2; i <= k; ++i ) {
        result *= (n-i+1);
        result /= i;
    }
    return result;
}

    vector<vector<int>> generate(int numRows) {
        numRows--;
        if(numRows == -1) return {};
        
        vector<vector<int>> res;
        for(int row = 0 ; row <= numRows; row++) {
            vector<int> res_row;
            for(int col = 0 ; col <= row ; col++) {
                res_row.push_back(nChoosek(row,col));
            }
            res.push_back(res_row);
        }
        return res;
        
    }
};