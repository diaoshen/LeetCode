414. Third Maximum Number
Easy

Given a non-empty array of integers, return the third maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).


Solution: 
	First solution swims the number up from ans[0] to ans[2] 
	Second solution swims the number down 




class Solution {
    public int thirdMax(int[] nums) {
		int ans[] = {Integer.MIN_VALUE,Integer.MIN_VALUE,Integer.MIN_VALUE};
		int num_distinct = 0; 
		boolean maxOnce = true;
		for(int i = 0 ; i< nums.length; i++){
			int curr = nums[i];
			if(curr == Integer.MIN_VALUE && maxOnce == true){
                maxOnce = false;
                num_distinct++;
            }
			if(!(ans[0] == curr || ans[1] == curr || ans[2] == curr)){
				num_distinct++;
				if(curr >= ans[0]){
					ans[0] = curr;		  
				}
				if(ans[0] >= ans[1]){
					int temp = ans[0];
					ans[0] = ans[1];
					ans[1] = temp;
				}
				if(ans[1] >= ans[2]){
					int temp = ans[2];
					ans[2] = ans[1];
					ans[1] = temp;
				}
			}
		}
        return num_distinct >= 3 ? ans[0] : ans[2];       
    }
}
Success
Details 
Runtime: 1 ms, faster than 91.11% of Java online submissions for Third Maximum Number.
Memory Usage: 37.4 MB, less than 100.00% of Java online submissions for Third Maximum Number.
Next challenges:


class Solution {
    public int thirdMax(int[] nums) {
        long max1 = Long.MIN_VALUE, max2 = max1, max3 = max1;
        for (int i=0; i<nums.length; i++) {
            if (nums[i] > max1) {
                max3 = max2;
                max2 = max1;
                max1 = nums[i];
            } else if (nums[i] > max2 && nums[i] != max1) {
                max3 = max2;
                max2 = nums[i];
            } else if (nums[i] > max3 && nums[i] != max2 && nums[i] != max1) {
                max3 = nums[i];
            }
        }
        return (int)(max3 < Integer.MIN_VALUE ? max1 : max3);
    }
}

Success
Details 
Runtime: 0 ms, faster than 100.00% of Java online submissions for Third Maximum Number.
Memory Usage: 38.3 MB, less than 91.30% of Java online submissions for Third Maximum Number.
Next challenges:




C++ Solution


int thirdMax(vector<int>& nums) {
	long int max1 = LONG_MIN , max2 = max1 , max3 = max1;
	for(int i = 0 ; i < nums.size(); i++){
		if(nums[i] > max1){
			max3 = max2;
			max2 = max1;
			max1 = nums[i];
		}else if(nums[i] > max2 && nums[i] != max1){
			max3 = max2;
			max2 = nums[i];

		}else if(nums[i] > max3 && nums[i] != max1 && nums[i] != max2){
			max3 = nums[i];
		}
	}
	return (int)(max3 < INT_MIN ? max1 : max3);
}
Success
Details 
Runtime: 8 ms, faster than 77.13% of C++ online submissions for Third Maximum Number.
Memory Usage: 8.9 MB, less than 100.00% of C++ online submissions for Third Maximum Number.