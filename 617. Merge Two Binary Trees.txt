617. Merge Two Binary Trees
Easy


Given two binary trees and imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not.

You need to merge them into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of new tree.

Example 1:

Input: 
	Tree 1                     Tree 2                  
          1                         2                             
         / \                       / \                            
        3   2                     1   3                        
       /                           \   \                      
      5                             4   7                  
Output: 
Merged tree:
	     3
	    / \
	   4   5
	  / \   \ 
	 5   4   7
 

Note: The merging process must start from the root nodes of both trees.



// C++ 
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {
        // do stuff 
        if(t1 == nullptr and t2 == nullptr) return nullptr;
        
        // LEFT <-- RIGHT 
        if(t1 == nullptr and t2 != nullptr) t1 = new TreeNode(t2->val);
    
        // Combine 
        else if(t1 != nullptr and t2 != nullptr) t1->val += t2->val;

        // friend do the rest 
        if(t2 != nullptr) {
            t1->left = mergeTrees(t1->left,t2->left);
            t1->right = mergeTrees(t1->right,t2->right);
        }
        else {
            t1->left = mergeTrees(t1->left , nullptr);
            t1->right = mergeTrees(t1->right , nullptr);
        }

  
        return t1;
    }
};



// Java 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {
        if(t1 == null && t2 == null) return null;
        
        // I do 
        if(t1 == null && t2 != null) t1 = new TreeNode(t2.val);
        else if(t1 != null && t2 != null) t1.val += t2.val;
  
        // Friend 
        t1.left = mergeTrees( t1 == null? null : t1.left , t2 == null? null : t2.left);
        t1.right = mergeTrees( t1 == null? null : t1.right , t2 == null? null : t2.right);
        
        return t1;
    }
}