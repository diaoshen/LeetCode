922. Sort Array By Parity II
Easy


Given an array A of non-negative integers, half of the integers in A are odd, and half of the integers are even.

Sort the array so that whenever A[i] is odd, i is odd; and whenever A[i] is even, i is even.

You may return any answer array that satisfies this condition.

 

Example 1:

Input: [4,2,5,7]
Output: [4,5,2,7]
Explanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.
 

Note:

2 <= A.length <= 20000
A.length % 2 == 0
0 <= A[i] <= 1000



// C++ 
class Solution {
public:
    vector<int> sortArrayByParityII(vector<int>& A) {
        vector<int> res(A.size() , 0);
        int even = 0;
        int odd = 1;
        for(auto& item : A) {
            if(item & 1) {
                res[odd] = item;
                odd += 2;
            }else {
                res[even] = item;
                even += 2;
            }
        }
        return res;
    }
};


// C++ In place 
Note: if no element is misplaced then i will be out of range, so checking for inrange before swapping is needed.
class Solution {
public: 
    vector<int> sortArrayByParityII(vector<int>& A) {
        for (int i = 0, j = 1; i < A.size(); i += 2, j += 2) {
            while (i < A.size() && A[i] % 2 == 0) i += 2;
            while (j < A.size() && A[j] % 2 == 1) j += 2;
            if (i < A.size()) swap(A[i], A[j]); 
        }
        return A;
    }
};